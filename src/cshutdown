#!/usr/bin/env python3
# $Id: cshutdown 186 2011-01-21 23:07:00Z tjn $

import c3_config
import c3_version

try:
	import sys, os
	
	sys.path.append( c3_config.def_path )
	import c3_com_obj, c3_file_obj, socket, c3_sock, re

	######## constants ####################################
	help_info = """Usage: cshutdown [OPTIONS] [MACHINE DEFINTIONS] t time [warning-message]

	--help -h	= Display help message.
	-a     		= Use /etc/shutdown.allow.
	-t sec 		= Tell init(8) to wait sec seconds between 
			  sending processes the warning and the kill 
			  signal, before changing to another runlevel.
	-k     		= Don't really shutdown; only send the warning 
			  messages to everybody.
	-r     		= Reboot after shutdown.
	-H     		= Halt after shutdown.
	-sF    		= Skip fsck on reboot.
	-F     		= Force fsck on reboot.
	-c     		= Cancel an already running shutdown. 
	--onreboot	= reboot to specified lilo label
	--file -f	= Alternate cluster configuration file.  If one 
			  is not supplied then /etc/c3.conf will be used.
	-i		= Interactive mode.  Ask once before executing.
	--head		= Execute command on head node.  Does not 
			  execute on compute nodes if specified.
	--all           = Execute command on all the nodes on all the 
			  clusters in the configuration file.  Ignores 
			  the [MACHINE_DEFINITONS] block.
	--dryrun -n	= Does not send commands to machines.
	--version -v 	= Display the version number

	Machine definitions are in the form of
	clusterName: start-end, node number"""

	backslash = re.compile( r"\\" )
	#######################################################


	######## check for arguments  #########################
	if len(sys.argv) == 1:
		print(help_info)
		sys.exit(c3_config.C3_OKEXIT)
	#######################################################


	######### et default options  #########################
	to_print = 0			#not used in parallel version
	interactive = 0			#prompt before execution
	head_node = 0			#execute only on head node
	filename = "/etc/c3.conf"	#default config file
	options = ""			#options passed to shutdown
	c3_options = ""			#options used for remote clusters
	pidlist = []			#list if pid's to wait on
	lilo_label = None		#label to reboot to next time
	time = -1
	#######################################################


	######### internal variables ##########################
	cluster_from_file = {}
	all = 0
	file_set = 0
	dryrun = 0
	returncode = 0
	#######################################################



	######### parse command line ##########################

	# first create one large string of the command 
	command_line_list = sys.argv[1:]
	command_line_string = ''
	for item in command_line_list:
		command_line_string = '%s %s' % (command_line_string, item)

	# object used to parse command line
	c3_command = c3_com_obj.c3_command_line( command_line_string )
	 
	# get first option
	try:
		option = c3_command.get_opt()
		while option: # while more options
			if option == '-a': # see shutdown man page for meaning
				c3_options = c3_options + " -a"
				options = options + " -a"

			elif option == '-t':
				sec = c3_command.get_opt_string()
				options = options + " -t " + sec
				c3_options = c3_options + " -t " + sec
			
			elif option == '-k':
				options = options + " -k"
				c3_options = c3_options + " -k"
			
			elif option == '-r':
				options = options + " -r"
				c3_options = c3_options + " -r"
			
			elif option == '-H':
				options = options + " -h"
				c3_options = c3_options + " -H"
			
			elif option == '-sF':
				options = options + " -f"
				c3_options = c3_options + " -sF"
			
			elif option == '-F':
				options = options + " -F"
				c3_options = c3_options + " -F"
			
			elif option == '-c':
				options = options + " -c"
				c3_options = c3_options + " -c"
				
			elif option == '--onreboot':
				lilo_label = c3_command.get_opt_string()
				c3_options = c3_options + " --onreboot " + lilo_label
				
			elif (option == '-f') or (option == '--file'): # alternate config file
				if not file_set:
					filename = c3_command.get_opt_string()
					file_set = 1
				else:
					print("only one file name can be specified.")
					sys.exit(c3_config.C3_ERRLOCAL)
					
			elif option == '-h' or option == "--help": # print help info
				print(help_info)
				sys.exit(c3_config.C3_OKEXIT)
				
			elif option == '-i': # ask once before executing command
				interactive = 1
				
			elif option == '--head': # execute only the head node
				head_node = 1
				
			elif option == '--all':
				all = 1
			elif option == '--dryrun' or option == '-n':
				dryrun = 1

			elif option == '--version' or option == '-v':
				# Get C3's version
				print(c3_version.c3_version)
				sys.exit(c3_config.C3_OKEXIT)
			else: # a catch all, option supplied not valid
				print("option ", option, " is not valid")
				sys.exit(C3_ERRLOACL)
			option = c3_command.get_opt()
	except c3_com_obj.end_of_option: #quit parsing options
		pass

	# create cluster object from command line 
	clusters = c3_com_obj.c3_cluster_list()
	 
	if all == 0:
		clusters = c3_command.get_clusters()
	else:
		c3_command.get_clusters()

	# get command to execute
	try:
		if c3_command.get_opt_string() != 't':
			raise c3_com_obj.bad_string( "No time specified, use a \"t\"", None)
		time = c3_command.get_opt_string()
		if int(time) < 0:
			print("must specify a time of 0 or greater")
			sys.exit(C3_ERRLOACL)
	except c3_com_obj.bad_string:
		print("must specify a time")
		sys.exit()
	except ValueError:
		print("time must be an integer")
		sys.exit(c3_config.C3_ERRLOCAL)

	message = c3_command.rest_of_command()
	#######################################################


	######### test if ssh or rsh ##########################
	try:
		transport = os.environ[ 'C3_RSH' ]
	except KeyError:
		transport = 'ssh'
	#######################################################

	######### set filename  ##########################
	if not file_set:
		try:
			filename = os.environ[ 'C3_CONF' ]
		except KeyError:
			filename = '/etc/c3.conf'
	#######################################################


	######### make cluster list object from file ##########
	try: # open file & initialize file parser
		file = c3_file_obj.cluster_def( filename )
	except IOError:
		print("error opening file: ", filename)
		sys.exit(c3_config.C3_ERRLOCAL)

	# note, someday need to change to only get clusters needed, need changes to the
	# file parser object for that, will be done in later versions

	try:
		file.get_next_cluster() # set the default cluster (first cluster in list)
		default_cluster = file.get_cluster_name()
		try:
			if clusters.clusters[0] ==  "/default": # if default cluster set correct cluster name
				clusters.clusters[0] = file.get_cluster_name()
				clusters.node[file.get_cluster_name()] = clusters.node["/default"]
				del clusters.node["/default"]
		except IndexError:
			pass 

		while(1): #throws exception when no more clusters
			c_name = file.get_cluster_name() #name of cluster being parsed
			if all == 1:
				clusters.clusters.append( c_name )
				clusters.node[c_name] = []
				clusters.node[c_name].append( "" )
			if c_name in clusters.clusters:
				cluster_from_file[c_name] = {}
				cluster_from_file[c_name]['external'] = file.get_external_head_node()
				cluster_from_file[c_name]['internal'] = file.get_internal_head_node()
				cluster_from_file[c_name]['nodes'] = [] #list of node names from file
				if cluster_from_file[c_name]['external']: #if a direct cluster
					index = 0
					try:
						while(1): # build list of nodes
							node_obj = file.get_next_node()
							cluster_from_file[c_name]['nodes'].append( c3_file_obj.node_obj() )
							cluster_from_file[c_name]['nodes'][index] = node_obj
							index = index + 1
					except c3_file_obj.end_of_cluster:
						pass
			file.get_next_cluster() #repeat untill no more clusters
	except c3_file_obj.no_more_clusters:
		pass
	except c3_file_obj.parse_error as error:
		print(error.description)
		print("somewhere around ", error.last)
		sys.exit(c3_config.C3_ERRLOCAL)

	#######################################################


	######### execute command on each node in cluster



	# there are two main groups, local and remote clusters
	# in each of those groups there are direct and indirect
	# modes, that is every node specified or a "link". A link
	# on a local cluster is of course invalid.

	# right now the only way I know how to check if a cluster
	# is local is to use a "gethostbyname" and compare it
	# to the head node names (both internel and externel).
	# right now that is acceptable as many tools require 
	# the function to work correctly (ssh being one of them)
	# my want to think about a better way.

	#host_ip = socket.gethostbyname( socket.gethostname() )

	while interactive: # if interactive execution, prompt once before executing
		answer = input( "shutdown specified machines(y or n): " )
		if re.compile( r".*n(o)?.*", re.IGNORECASE ).match( answer ):
			sys.exit()
		if re.compile( r".*y(es)?.*", re.IGNORECASE).match( answer ):
			interactive = 0


	pid_list_outer = []
	for cluster in clusters.clusters:
		pid = os.fork()
		if pid == 0:

			############ get machine names #############################
			try: 
				local_ip = socket.gethostbyname( socket.gethostname() )
			except socket.error:
				print("Can not resolve local hostname")
				os._exit(c3_config.C3_ERRLOCAL)
			try:
				int_ip = socket.gethostbyname( cluster_from_file[cluster]['internal'] )
			except socket.error:
				int_ip = ""
			except KeyError:
				print("Cluster ", cluster, " is not in you configuration file.")
				continue
			try:
				ext_ip = socket.gethostbyname( cluster_from_file[cluster]['external'] )
			except socket.error:
				ext_ip = ""
			except TypeError:
				ext_ip = int_ip
			############################################################
			
			if head_node:   #if only execute on head node , do so
					#will execute on local cluster with ssh also
				string_to_execute = transport + " " + ext_ip + " \' /sbin/shutdown " + options + " " + time + " " + message + "\'"
				if dryrun:
					print(string_to_execute)
					os._exit(c3_config.C3_OKEXIT)
				code = os.system( string_to_execute)>>8
				if( code != 0 ): returncode = code

			elif cluster_from_file[cluster]['external']: # if a direct cluster
				if ext_ip == local_ip or int_ip == local_ip: # if a local cluster

					if ext_ip == "": # error conditions (just don't execute current cluster)
						print("Can not resolve ", cluster_from_file[cluster]['external'])
					elif int_ip == "":
						print("can not resolve ", cluster_from_file[cluster]['internal'])

					elif clusters.node[cluster][0] != "" : #range specified on command line
						try:
							for node in clusters.node[cluster]: #for each cluster specified on the command line
								if not cluster_from_file[cluster]['nodes'][node].dead: #if machine is not dead
									pid = os.fork() # execute command on each node in it's own process
									if pid == 0:
										node_name = cluster_from_file[cluster]['nodes'][node].name
										if lilo_label:
											string_to_execute = transport + " " + node_name + " \'/sbin/lilo -R " + lilo_label + "\'" 
											if dryrun:
												print(string_to_execute)
											else:
												code = os.system( string_to_execute )>>8
												if( code != 0 ): returncode = code
										string_to_execute = transport + " " + node_name + " \'/sbin/shutdown " +  options + " " + time + " " + message + " \'"
										if dryrun:
											print(string_to_execute)
											os._exit(c3_config.C3_OKEXIT)
										code = os.system( string_to_execute )>>8
										if( code != 0 ): returncode = code
										os._exit(returncode)
									pidlist.append(pid)
						except IndexError:
							pass
					else:  # no range specified on command line, do all nodes
						for node in cluster_from_file[cluster]['nodes']:  # for each node in cluster
							if not node.dead: #if node not dead
								pid = os.fork() # execute command in own process
								if pid == 0:
									node_name = node.name
									if lilo_label:
										string_to_execute = transport + " " + node_name + " \'/sbin/lilo -R " + lilo_label + "\'" 
										if dryrun:
											print(string_to_execute)
										else:
											code = os.system( string_to_execute )>>8
											if( code != 0 ): returncode = code
									string_to_execute = transport + " " + node_name + " \'/sbin/shutdown " +  options + " " + time + " " + message + " \'"
									if dryrun:
										print(string_to_execute)
										os._exit(c3_config.C3_OKEXIT)
									code = os.system( string_to_execute )>>8
									if( code != 0 ): returncode = code
									os._exit(returncode)
								pidlist.append(pid)
				else: # remote cluster
					if ext_ip == "": # error condition
						print("Can not resolve ", cluster_from_file[cluster]['external'])
						sys.stdout.flush()
					else:
						# generate temprorary config file
						cluster_def_string = "cluster auto_gen {\n"
						cluster_def_string = cluster_def_string + cluster_from_file[cluster]['external'] + ":" + cluster_from_file[cluster]['internal'] + "\n"

			
						if clusters.node[cluster][0] != "" : #range specified on command line
							try:
								for node in clusters.node[cluster]: #for each node specified on command line
									if not cluster_from_file[cluster]['nodes'][node].dead: # if cluster node not dead
										node_name = cluster_from_file[cluster]['nodes'][node].name #add cluster to list
										cluster_def_string = cluster_def_string + node_name + "\n"
							except IndexError:
								pass
						else:  # no range specified on command line, do all nodes
							for node in cluster_from_file[cluster]['nodes']: # for each node in cluster
								if not node.dead: #if node not dead, add to list
										cluster_def_string = cluster_def_string +  node.name + "\n"
						cluster_def_string = cluster_def_string + "}" # close list
										
						#this is an attempt to generate a unique file name. As there is no easy way
						#for me to see the remote machine I mangle a group of relativly unique
						#identifiers. since i prepend the machine ip address if the file does not reside localy
						#it should not remotely, at the very least it should be safe to rewrite the file
						filename = "/tmp/" + local_ip + "%d" % os.getuid() + "%d" % os.getpid() 

						string_to_execute = transport + " " + ext_ip + " " + c3_config.def_path + "/cget --head --non_interactive " + filename
						if dryrun:
							print(string_to_execute)
						else:
							sock = c3_sock.server_sock( string_to_execute )
							answer = sock.recieve()
							sock.close()
							while answer == 'good': #make sure file name is unique on local machine
								filename = filename + "1"
								string_to_execute = transport + " " + ext_ip + " " + c3_config.def_path + "/cget --head --non_interactive " + filename
								sock.__init__( string_to_execute )
								answer = sock.recieve()
								sock.close()

							FILE = open( filename, 'w' )
							FILE.write( cluster_def_string )
							FILE.close()
							# push file to remote machine
							string_to_execute = "rsync --rsh=" + transport + " " + 	filename + " " + ext_ip + ":" +  filename
							code = os.system( string_to_execute )>>8
							if( code != 0 ): returncode = code
						# execute commend remotely
						string_to_execute = transport + " " + ext_ip + " \' " + c3_config.def_path + "/cshutdown -f " + filename + " " + c3_options + " t " + time + " " + message + "\'"
						if dryrun:
							print(string_to_execute)
						else:
							code = os.system( string_to_execute )>>8
							if( code != 0 ): returncode = code
						# remove temporary file
						string_to_execute = transport + " " + ext_ip + " /bin/rm -f " + filename
						if dryrun:
							print(string_to_execute)
							os._exit(c3_config.C3_OKEXIT)
						code = os.system( string_to_execute )>>8
						if( code != 0 ): returncode = code
						os.unlink( filename ) # remove local temp file
					
			else: # indirect clusters
				if int_ip == local_ip:  # can not have a indirect local cluster since if your default cluster
							# is local you would generate a circular reference
					print("error local cluster")
					sys.stdout.flush()
				else: # remote indirect cluster
					if int_ip == "": # error condition
						print("Can not resolve hostname ", cluster_from_file[cluster]['internal'])
						sys.stdout.flush()
					else:
						node_list = "" # generate new node list from the command line
						if clusters.node[cluster][0] != "" : #range specified on command line
							node_list = ":%d" % clusters.node[cluster].pop(0)

							for node in clusters.node[cluster]:
								node_list = node_list + ", %d" % node	
						# execute command on remote machine
						string_to_execute = transport + " " + int_ip + " \' " + c3_config.def_path + "/cshutdown " + c3_options + " " + node_list + " " + " t " + time + " " + message + "\'"
						if dryrun:
							print(string_to_execute)
							os._exit(c3_config.C3_OKEXIT)
						code = os.system( string_to_execute )>>8
						if( code != 0 ): returncode = code

			os._exit(returncode)
		for pid in pidlist: # wait for all processes spawned to finish
			pid, code = os.wait()
			if(code>>8 != 0): returncode = code>>8
except KeyboardInterrupt:
	print("Keyboard interrupt\n")

sys.exit(returncode)

# vim:tabstop=4:shiftwidth=4:noexpandtab:textwidth=76
