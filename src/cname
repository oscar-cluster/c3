#!/usr/bin/env python3
# $Id: cname 205 2011-01-26 03:58:33Z tjn $

import c3_config
import c3_version

try:
	import sys, os

	sys.path.append( c3_config.def_path )
	import c3_com_obj, c3_file_obj, socket, re

	######## constants ####################################
	help_info = """Usage: cname [OPTIONS] [MACHINE DEFINTIONS]

	--help -h	= Display help message.
	--file -f	= Alternate cluster configuration file.  If one 
			  is not supplied then /etc/c3.conf will be used.
	--all		= Prints the names of all the nodes.
	--version -v 	= Display the version number
	
	Machine definitions are in the form of
	clusterName: start-end, node number"""

	backslash = re.compile( r"\\" )
	#######################################################

	######## check for arguments  #########################
	if len(sys.argv) == 1:
		print(help_info)
		sys.exit(c3_config.C3_OKEXIT)
	#######################################################



	######### et default options  #########################
	head_node = 0			#execute only on head node
	filename = "/etc/c3.conf"	#default config file
	all = 0				#0 only clusters specified 1 all clusters
	defusername = ""		#default user name
	#######################################################


	######### internal variables ##########################
	cluster_from_file = {}
	file_set = 0
	dryrun = 0
	returncode = 0
	#######################################################


	######### parse command line ##########################

	# first create one large string of the command 
	command_line_list = sys.argv[1:]
	command_line_string = ''
	for item in command_line_list:
		command_line_string = '%s %s' % (command_line_string, item)

	# object used to parse command line
	c3_command = c3_com_obj.c3_command_line( command_line_string )
	
	 
	# get first option
	try:
		option = c3_command.get_opt()
		while option: # while more options
			if (option == '-f') or (option == '--file'): # alternate config file
				if not file_set:
					filename = c3_command.get_opt_string()
					file_set = 1
				else:
					print("only one file name can be specified.")
					sys.exit(c3_config.C3_ERRLOCAL)
			elif option == '-h' or option == "--help": # print help info
				print(help_info)
				sys.exit(c3_config.C3_OKEXIT)
			elif option == "--all":
				all = 1
			elif option == '--version' or option == '-v':
				# Get C3's version
				print(c3_version.c3_version)
				sys.exit(c3_config.C3_OKEXIT)
			else: # a catch all, option supplied not valid
				print("option ", option, " is not valid")
				sys.exit(c3_config.C3_ERRLOCAL)
			option = c3_command.get_opt()
	except c3_com_obj.end_of_option: #quit parsing options
		pass

	# create cluster object from command line 
	clusters = c3_com_obj.c3_cluster_list()
	 
	if all == 0:
		clusters = c3_command.get_clusters()
	else:
		c3_command.get_clusters()
	 
	#######################################################


	######### test if ssh or rsh ##########################
	try:
		transport = os.environ[ 'C3_RSH' ]
	except KeyError:
		transport = 'ssh'
	#######################################################
	######### set default username ########################
	try:
		defusername = os.environ[ 'C3_USER' ]
	except KeyError:
		defusername = os.environ[ 'USER' ]
	#######################################################

	######### set filename  ##########################
	if not file_set:
		try:
			filename = os.environ[ 'C3_CONF' ]
		except KeyError:
			filename = '/etc/c3.conf'
	#######################################################

	######### make cluster list object from file ##########
	try: # open file & initialize file parser
		file = c3_file_obj.cluster_def( filename )
	except IOError:
		print("error opening file: ", filename)
		sys.exit(c3_config.C3_ERRLOCAL)

	try:
		file.get_next_cluster() # set the default cluster (first cluster in list)
		
		try:
			if clusters.clusters[0] == '/default':
				clusters.clusters[0] = file.get_cluster_name()
				clusters.node[file.get_cluster_name()] = clusters.node["/default"]
				del clusters.node["/default"]
				clusters.username[file.get_cluster_name()] = clusters.username["/default"]
		except IndexError: #if --all is specified
			pass
		while(1): #throws exception when no more clusters
			c_name = file.get_cluster_name() #name of cluster being parsed
			if all == 1:
				clusters.clusters.append( c_name )
				clusters.node[c_name] = []
				clusters.node[c_name].append( "" )
			if c_name in clusters.clusters or all == 1:
				cluster_from_file[c_name] = {}
				cluster_from_file[c_name]['external'] = file.get_external_head_node()
				cluster_from_file[c_name]['internal'] = file.get_internal_head_node()
				cluster_from_file[c_name]['nodes'] = [] #list of node names from file
				if cluster_from_file[c_name]['external']: #if a direct cluster
					index = 0
					try:
						while(1): # build list of nodes
							node_obj = file.get_next_node()
							cluster_from_file[c_name]['nodes'].append( c3_file_obj.node_obj() )
							cluster_from_file[c_name]['nodes'][index] = node_obj
							index = index + 1
					except c3_file_obj.end_of_cluster:
						pass
			file.get_next_cluster() #repeat untill no more clusters
		print(cluster_from_file)
	except c3_file_obj.no_more_clusters:
		pass
	except c3_file_obj.parse_error as error:
		print(error.description)
		print("somewhere around ", error.last)
		sys.exit(c3_config.C3_ERRLOCAL)

	#######################################################


	######### execute command on each node in cluster



	# there are two main groups, local and remote clusters
	# in each of those groups there are direct and indirect
	# modes, that is every node specified or a "link". A link
	# on a local cluster is of course invalid.

	# right now the only way I know how to check if a cluster
	# is local is to use a "gethostbyname" and compare it
	# to the head node names (both internel and externel).
	# right now that is acceptable as many tools require 
	# the function to work correctly (ssh being one of them)
	# my want to think about a better way.

	#host_ip = socket.gethostbyname( socket.gethostname() )

	pid_list_outer = []
	for cluster in clusters.clusters:
		pid = os.fork()
		if pid == 0:
			############ get machine names #############################
			try: 
				local_ip = socket.gethostbyname( socket.gethostname() )
			except socket.error:
				print("Can not resolve local hostname")
				sys.exit(c3_config.C3_ERRLOCAL)
			try:
				int_ip = socket.gethostbyname( cluster_from_file[cluster]['internal'] )
			except socket.error:
				int_ip = ""
			except KeyError:
				print("Cluster ", cluster, " is not in you configuration file.")
				continue
			try:
				ext_ip = socket.gethostbyname( cluster_from_file[cluster]['external'] )
			except socket.error:
				ext_ip = ""
			except TypeError:
				ext_ip = int_ip
			############################################################
			
			try:
				if clusters.username[cluster] == "/default":
					username = defusername
				else:
					username = clusters.username[cluster]
			except KeyError: #if --all is specified
				username = defusername
			
			if cluster_from_file[cluster]['external']: # if a direct cluster
				if ext_ip == local_ip or int_ip == local_ip: # if a local cluster

					print("nodes from cluster: ", cluster)
					if ext_ip == "": # error conditions (just don't execute current cluster)
						print("Can not resolve ", cluster_from_file[cluster]['external'])
					elif int_ip == "":
						print("can not resolve ", cluster_from_file[cluster]['internal'])

					elif clusters.node[cluster][0] != "" : #range specified on command line
						try:
							for node in clusters.node[cluster]: #for each cluster specified on the command line
								
								node_name = cluster_from_file[cluster]['nodes'][node].name
								print("cluster: ", cluster, "; node name: ", node_name)
						except IndexError:
							pass
					else:  # no range specified on command line, do all nodes
						for node in cluster_from_file[cluster]['nodes']:  # for each node in cluster
							node_name = node.name
							print("cluster: ", cluster, "; node name: ", node_name)
				else: # remote cluster
					if ext_ip == "": # error condition
						print("Can not resolve ", cluster_from_file[cluster]['external'])
						sys.stdout.flush()
					else:
						print("remote cluster: ", cluster)
						if clusters.node[cluster][0] != "" : #range specified on command line
							try:
									for node in clusters.node[cluster]: #for each node specified on command line
										node_name = cluster_from_file[cluster]['nodes'][node].name #add cluster to list
										print("cluster: ", cluster, "; node name: ", node_name)
							except IndexError:
								pass
						else:  # no range specified on command line, do all nodes
							for node in cluster_from_file[cluster]['nodes']: # for each node in cluster
								print("cluster: ", cluster, "; node name: ", node.name)
			else: # indirect clusters
				if int_ip == local_ip:  # can not have a indirect local cluster since if your default cluster
							# is local you would generate a circular reference
					print("error local cluster")
					sys.stdout.flush()
				else: # remote indirect cluster
					if int_ip == "": # error condition
						print("Can not resolve hostname ", cluster_from_file[cluster]['internal'])
						sys.stdout.flush()
					else:
						node_list = "" # generate new node list from the command line
						if clusters.node[cluster][0] != "" : #range specified on command line
							node_list = ":%d" % clusters.node[cluster].pop(0)

							for node in clusters.node[cluster]:
								node_list = node_list + ", %d" % node	
						# execute command on remote machine
						print("local name for cluster: ", cluster)
						string_to_execute = transport + " -l " + username + " " + int_ip + " " + c3_config.def_path + "/cname " + node_list
						code = os.system( string_to_execute )>>8
						if( code != 0 ): returncode = code

			sys.stdout.flush()
			os._exit(returncode)
		pid_list_outer.append(pid)
	for pid in pid_list_outer:
		pid, code = os.wait()
		if(code>>8 != 0): returncode = code>>8
except KeyboardInterrupt:
	print("Keyboard interrupt\n")
	
sys.exit(returncode)

# vim:tabstop=4:shiftwidth=4:noexpandtab:textwidth=76
